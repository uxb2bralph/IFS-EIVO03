@using System.IO
@using System.Linq.Expressions
@using System.Threading.Tasks

@using eIVOGo.Models
@using eIVOGo.Helper
@using eIVOGo.Models.ViewModel
@using eIVOGo.Controllers
@using Business.Helper
@using Model.Helper
@using Model.Locale
@using Model.Models.ViewModel
@using Model.DataEntity
@using Model.Security.MembershipManagement
@using Utility
@using Uxnet.Web.WebUI
@functions
{
    static void SaveAsERP(int taskID, String resultFile, InquireInvoiceViewModel viewModel,UserProfileMember profile)
    {
        Task.Run(() =>
        {
            try
            {
                using(ModelSource db = new ModelSource())
                {
                    IQueryable<InvoiceItem> items = db.GetTable<InvoiceItem>();
                    items = db.FilterInvoiceByRole(profile, items)
                                .InquireInvoice(viewModel, db);

                    Exception exception = null;

                    try
                    {
                        String tmpPath = Path.Combine(Logger.LogDailyPath, $"{Guid.NewGuid()}.tmp");
                        using (StreamWriter writer = new StreamWriter(tmpPath))
                        {
                            foreach(var item in items)
                            {
                                writer.WriteLine($"{item.Organization.OrganizationExtension?.CustomerNo,8}{item.InvoiceDate.Value.Year - 1911:0000}{item.InvoiceDate:MMdd}{item.TrackCode}{item.No}{(item.InvoiceBuyer.IsB2C() ? "        " : item.InvoiceBuyer.ReceiptNo)}{item.InvoiceAmountType.SalesAmount,8:########}{item.InvoiceAmountType.TaxAmount,8:########}{item.InvoiceAmountType.TotalAmount,8:########}{(item.InvoiceCancellation != null ? "Y" : " ")}");
                            }
                        }
                        File.Move(tmpPath, resultFile);
                    }
                    catch (Exception ex)
                    {
                        Logger.Error($"{ex}\r\n{items}");
                        exception = ex;
                    }

                    ProcessRequest taskItem = db.GetTable<ProcessRequest>()
                                    .Where(t => t.TaskID == taskID).FirstOrDefault();

                    if (taskItem != null)
                    {
                        if (exception != null)
                        {
                            var logItem = new ExceptionLog
                            {
                                DataContent = exception.Message,
                                LogTime = DateTime.Now,
                            };
                            db.GetTable<ExceptionLog>().InsertOnSubmit(logItem);
                            db.SubmitChanges();

                            taskItem.LogID = logItem.LogID;
                        }

                        taskItem.ProcessComplete = DateTime.Now;
                        db.SubmitChanges();
                    }
                }

            }
            catch (Exception ex)
            {
                Logger.Error(ex);
            }

        });

    }

}
@{

    ModelSource<InvoiceItem> models;
    models = ((SampleController<InvoiceItem>)ViewContext.Controller).DataSource;

    InquireInvoiceViewModel _viewModel = new InquireInvoiceViewModel();
    ((SampleController<InvoiceItem>)ViewContext.Controller).BuildViewModel(_viewModel);

    var profile = Context.GetUser();

    ProcessRequest processItem = new ProcessRequest
    {
        Sender = profile?.UID,
        SubmitDate = DateTime.Now,
        ProcessStart = DateTime.Now,
        ResponsePath = System.IO.Path.Combine(Logger.LogDailyPath, Guid.NewGuid().ToString() + ".txt"),
    };
    models.GetTable<ProcessRequest>().InsertOnSubmit(processItem);
    models.SubmitChanges();

    SaveAsERP(processItem.TaskID, processItem.ResponsePath, _viewModel, profile);

    Html.RenderPartial("~/Views/Shared/Module/PromptCheckDownload.cshtml",
            new AttachmentViewModel
            {
                TaskID = processItem.TaskID,
                FileName = processItem.ResponsePath,
                FileDownloadName = "POSINV.dat",
            });
}
