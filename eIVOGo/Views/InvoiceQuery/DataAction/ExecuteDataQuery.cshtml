
@using System.IO
@using System.Linq.Expressions
@using System.Data
@using System.Data.SqlClient

@using eIVOGo.Controllers
@using eIVOGo.Helper
@using eIVOGo.Models
@using Model.DataEntity
@using Business.Helper
@using Model.Helper
@using Model.Locale
@using Model.Models.ViewModel
@using Utility
@using Uxnet.Web.WebUI

@functions
{
    DataQueryViewModel _viewModel;
}
@{
    ModelSource<InvoiceItem> models;
    models = ((SampleController<InvoiceItem>)ViewContext.Controller).DataSource;

    _viewModel = (DataQueryViewModel)ViewBag.ViewModel;
}
@{ 
    ProcessRequest processItem = new ProcessRequest
    {
        Sender = Context.GetUser()?.UID,
        SubmitDate = DateTime.Now,
        ProcessStart = DateTime.Now,
        ResponsePath = System.IO.Path.Combine(Logger.LogDailyPath, Guid.NewGuid().ToString() + ".xlsx"),
    };
    models.GetTable<ProcessRequest>().InsertOnSubmit(processItem);
    models.SubmitChanges();

    saveAsExcel(processItem.TaskID, processItem.ResponsePath);

    Html.RenderPartial("~/Views/Shared/Module/PromptCheckDownload.cshtml", 
        new AttachmentViewModel
        {
            TaskID = processItem.TaskID,
            FileName = processItem.ResponsePath,
            FileDownloadName = "查詢資料.xlsx",
        });

}

@functions
{
    void saveAsExcel(int taskID,String resultFile)
    {
        System.Threading.ThreadPool.QueueUserWorkItem(stateInfo =>
        {
            try
            {
                using (Model.InvoiceManagement.InvoiceManager mgr = new Model.InvoiceManagement.InvoiceManager())
                {
                    Exception exception = null;

                    try
                    {

                        SqlConnection conn = (SqlConnection)mgr.GetTable<Organization>().Context.Connection;
                        SqlCommand sqlCmd = new SqlCommand(_viewModel.CommandText, conn);
                        using (SqlDataAdapter adapter = new SqlDataAdapter(sqlCmd))
                        {
                            using (DataSet ds = new DataSet())
                            {
                                adapter.Fill(ds);
                                using (ClosedXML.Excel.XLWorkbook xls = new ClosedXML.Excel.XLWorkbook())
                                {
                                    xls.Worksheets.Add(ds);
                                    xls.SaveAs(resultFile);
                                }
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        Logger.Error(ex);
                        exception = ex;
                    }

                    ProcessRequest taskItem = mgr.GetTable<ProcessRequest>()
                                    .Where(t => t.TaskID == taskID).FirstOrDefault();

                    if (taskItem != null)
                    {
                        if(exception!=null)
                        {
                            taskItem.ExceptionLog = new ExceptionLog
                            {
                                DataContent = exception.Message
                            };
                        }
                        taskItem.ProcessComplete = DateTime.Now;
                        mgr.SubmitChanges();
                    }

                }
            }
            catch (Exception ex)
            {
                Logger.Error(ex);
            }
        });
    }
}
