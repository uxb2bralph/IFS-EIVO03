#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TestConsole.Models.DataEntity
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="EIVO03")]
	public partial class SampleEIVODataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertInvoiceAllowance(InvoiceAllowance instance);
    partial void UpdateInvoiceAllowance(InvoiceAllowance instance);
    partial void DeleteInvoiceAllowance(InvoiceAllowance instance);
    partial void InsertCurrencyType(CurrencyType instance);
    partial void UpdateCurrencyType(CurrencyType instance);
    partial void DeleteCurrencyType(CurrencyType instance);
    #endregion
		
		public SampleEIVODataContext() : 
				base(global::TestConsole.Properties.Settings.Default.EIVO03ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public SampleEIVODataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SampleEIVODataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SampleEIVODataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SampleEIVODataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<InvoiceAllowance> InvoiceAllowance
		{
			get
			{
				return this.GetTable<InvoiceAllowance>();
			}
		}
		
		public System.Data.Linq.Table<CurrencyType> CurrencyType
		{
			get
			{
				return this.GetTable<CurrencyType>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.InvoiceAllowance")]
	public partial class InvoiceAllowance : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AllowanceID;
		
		private string _AllowanceNumber;
		
		private System.Nullable<byte> _AllowanceType;
		
		private System.Nullable<System.DateTime> _AllowanceDate;
		
		private System.Nullable<decimal> _TotalAmount;
		
		private System.Nullable<decimal> _TaxAmount;
		
		private System.Nullable<int> _InvoiceID;
		
		private string _SellerId;
		
		private string _BuyerId;
		
		private System.Nullable<int> _CurrencyID;
		
		private EntityRef<CurrencyType> _CurrencyType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAllowanceIDChanging(int value);
    partial void OnAllowanceIDChanged();
    partial void OnAllowanceNumberChanging(string value);
    partial void OnAllowanceNumberChanged();
    partial void OnAllowanceTypeChanging(System.Nullable<byte> value);
    partial void OnAllowanceTypeChanged();
    partial void OnAllowanceDateChanging(System.Nullable<System.DateTime> value);
    partial void OnAllowanceDateChanged();
    partial void OnTotalAmountChanging(System.Nullable<decimal> value);
    partial void OnTotalAmountChanged();
    partial void OnTaxAmountChanging(System.Nullable<decimal> value);
    partial void OnTaxAmountChanged();
    partial void OnInvoiceIDChanging(System.Nullable<int> value);
    partial void OnInvoiceIDChanged();
    partial void OnSellerIdChanging(string value);
    partial void OnSellerIdChanged();
    partial void OnBuyerIdChanging(string value);
    partial void OnBuyerIdChanged();
    partial void OnCurrencyIDChanging(System.Nullable<int> value);
    partial void OnCurrencyIDChanged();
    #endregion
		
		public InvoiceAllowance()
		{
			this._CurrencyType = default(EntityRef<CurrencyType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AllowanceID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int AllowanceID
		{
			get
			{
				return this._AllowanceID;
			}
			set
			{
				if ((this._AllowanceID != value))
				{
					this.OnAllowanceIDChanging(value);
					this.SendPropertyChanging();
					this._AllowanceID = value;
					this.SendPropertyChanged("AllowanceID");
					this.OnAllowanceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AllowanceNumber", DbType="NVarChar(16)")]
		public string AllowanceNumber
		{
			get
			{
				return this._AllowanceNumber;
			}
			set
			{
				if ((this._AllowanceNumber != value))
				{
					this.OnAllowanceNumberChanging(value);
					this.SendPropertyChanging();
					this._AllowanceNumber = value;
					this.SendPropertyChanged("AllowanceNumber");
					this.OnAllowanceNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AllowanceType", DbType="TinyInt")]
		public System.Nullable<byte> AllowanceType
		{
			get
			{
				return this._AllowanceType;
			}
			set
			{
				if ((this._AllowanceType != value))
				{
					this.OnAllowanceTypeChanging(value);
					this.SendPropertyChanging();
					this._AllowanceType = value;
					this.SendPropertyChanged("AllowanceType");
					this.OnAllowanceTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AllowanceDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> AllowanceDate
		{
			get
			{
				return this._AllowanceDate;
			}
			set
			{
				if ((this._AllowanceDate != value))
				{
					this.OnAllowanceDateChanging(value);
					this.SendPropertyChanging();
					this._AllowanceDate = value;
					this.SendPropertyChanged("AllowanceDate");
					this.OnAllowanceDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalAmount", DbType="Decimal(18,5)")]
		public System.Nullable<decimal> TotalAmount
		{
			get
			{
				return this._TotalAmount;
			}
			set
			{
				if ((this._TotalAmount != value))
				{
					this.OnTotalAmountChanging(value);
					this.SendPropertyChanging();
					this._TotalAmount = value;
					this.SendPropertyChanged("TotalAmount");
					this.OnTotalAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TaxAmount", DbType="Decimal(18,5)")]
		public System.Nullable<decimal> TaxAmount
		{
			get
			{
				return this._TaxAmount;
			}
			set
			{
				if ((this._TaxAmount != value))
				{
					this.OnTaxAmountChanging(value);
					this.SendPropertyChanging();
					this._TaxAmount = value;
					this.SendPropertyChanged("TaxAmount");
					this.OnTaxAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InvoiceID", DbType="Int")]
		public System.Nullable<int> InvoiceID
		{
			get
			{
				return this._InvoiceID;
			}
			set
			{
				if ((this._InvoiceID != value))
				{
					this.OnInvoiceIDChanging(value);
					this.SendPropertyChanging();
					this._InvoiceID = value;
					this.SendPropertyChanged("InvoiceID");
					this.OnInvoiceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SellerId", DbType="NVarChar(10)")]
		public string SellerId
		{
			get
			{
				return this._SellerId;
			}
			set
			{
				if ((this._SellerId != value))
				{
					this.OnSellerIdChanging(value);
					this.SendPropertyChanging();
					this._SellerId = value;
					this.SendPropertyChanged("SellerId");
					this.OnSellerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BuyerId", DbType="NVarChar(10)")]
		public string BuyerId
		{
			get
			{
				return this._BuyerId;
			}
			set
			{
				if ((this._BuyerId != value))
				{
					this.OnBuyerIdChanging(value);
					this.SendPropertyChanging();
					this._BuyerId = value;
					this.SendPropertyChanged("BuyerId");
					this.OnBuyerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrencyID", DbType="Int")]
		public System.Nullable<int> CurrencyID
		{
			get
			{
				return this._CurrencyID;
			}
			set
			{
				if ((this._CurrencyID != value))
				{
					if (this._CurrencyType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCurrencyIDChanging(value);
					this.SendPropertyChanging();
					this._CurrencyID = value;
					this.SendPropertyChanged("CurrencyID");
					this.OnCurrencyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CurrencyType_InvoiceAllowance", Storage="_CurrencyType", ThisKey="CurrencyID", OtherKey="CurrencyID", IsForeignKey=true)]
		public CurrencyType CurrencyType
		{
			get
			{
				return this._CurrencyType.Entity;
			}
			set
			{
				CurrencyType previousValue = this._CurrencyType.Entity;
				if (((previousValue != value) 
							|| (this._CurrencyType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CurrencyType.Entity = null;
						previousValue.InvoiceAllowance.Remove(this);
					}
					this._CurrencyType.Entity = value;
					if ((value != null))
					{
						value.InvoiceAllowance.Add(this);
						this._CurrencyID = value.CurrencyID;
					}
					else
					{
						this._CurrencyID = default(Nullable<int>);
					}
					this.SendPropertyChanged("CurrencyType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CurrencyType")]
	public partial class CurrencyType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CurrencyID;
		
		private string _CurrencyName;
		
		private string _AbbrevName;
		
		private EntitySet<InvoiceAllowance> _InvoiceAllowance;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCurrencyIDChanging(int value);
    partial void OnCurrencyIDChanged();
    partial void OnCurrencyNameChanging(string value);
    partial void OnCurrencyNameChanged();
    partial void OnAbbrevNameChanging(string value);
    partial void OnAbbrevNameChanged();
    #endregion
		
		public CurrencyType()
		{
			this._InvoiceAllowance = new EntitySet<InvoiceAllowance>(new Action<InvoiceAllowance>(this.attach_InvoiceAllowance), new Action<InvoiceAllowance>(this.detach_InvoiceAllowance));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrencyID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CurrencyID
		{
			get
			{
				return this._CurrencyID;
			}
			set
			{
				if ((this._CurrencyID != value))
				{
					this.OnCurrencyIDChanging(value);
					this.SendPropertyChanging();
					this._CurrencyID = value;
					this.SendPropertyChanged("CurrencyID");
					this.OnCurrencyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrencyName", DbType="NVarChar(64)")]
		public string CurrencyName
		{
			get
			{
				return this._CurrencyName;
			}
			set
			{
				if ((this._CurrencyName != value))
				{
					this.OnCurrencyNameChanging(value);
					this.SendPropertyChanging();
					this._CurrencyName = value;
					this.SendPropertyChanged("CurrencyName");
					this.OnCurrencyNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AbbrevName", DbType="NVarChar(16)")]
		public string AbbrevName
		{
			get
			{
				return this._AbbrevName;
			}
			set
			{
				if ((this._AbbrevName != value))
				{
					this.OnAbbrevNameChanging(value);
					this.SendPropertyChanging();
					this._AbbrevName = value;
					this.SendPropertyChanged("AbbrevName");
					this.OnAbbrevNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CurrencyType_InvoiceAllowance", Storage="_InvoiceAllowance", ThisKey="CurrencyID", OtherKey="CurrencyID")]
		public EntitySet<InvoiceAllowance> InvoiceAllowance
		{
			get
			{
				return this._InvoiceAllowance;
			}
			set
			{
				this._InvoiceAllowance.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_InvoiceAllowance(InvoiceAllowance entity)
		{
			this.SendPropertyChanging();
			entity.CurrencyType = this;
		}
		
		private void detach_InvoiceAllowance(InvoiceAllowance entity)
		{
			this.SendPropertyChanging();
			entity.CurrencyType = null;
		}
	}
}
#pragma warning restore 1591
